// Create an empty array with the same length of the input array and fiit it with any integer.
// Create two indexes: 'smallerValueIdx' that starts at the beginning, and 'largerValueIdx'
// that starts at the end.
// Then, iterate the input array downwardly using also the previous indexes. Compare absolute
// values at those indexes. In case the the value at 'smallerValueIdx' index is greater than
// the value at 'largerValueIdx' index, generate the square with the value at
// 'smallerValueIdx', put it in the output array in the 'idx' value (last index of the array),
//  and increase the 'smallerValueIdx'. In case the value at 'smallerValueIdx' is less than or
// equal to 'largerValueIdx', generate the square with value at 'largerValueIdx', put it in 
// the output array in the 'idx' value, and decrease the 'largerValue'.
// O(n) T
// O(n) S

function sortedSquaredArray(array) {
    const sortedSquares = new Array(array.length).fill(0);
    let smallerValueIdx = 0;
    let largerValueIdx = array.length - 1;

    for(let idx = array.length - 1; idx >=0; idx--) {
        const smallerValue = array[smallerValueIdx];
        const largerValue = array[largerValueIdx];

        if (Math.abs(smallerValue) > Math.abs(largerValue)) {
            sortedSquares[idx] = smallerValue * smallerValue;
            smallerValueIdx++;
        }
        else {
            sortedSquares[idx] = largerValue * largerValue;
            largerValueIdx--;
        }
    }

    return sortedSquares;
}

console.log(sortedSquaredArray([-5, 2, 3, 5, 6, 8, 9]));
console.log(sortedSquaredArray([-4, -3, 0, 1, 2, 5]));